// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.pgs.pcare.domain;

import com.pgs.pcare.domain.PcareUser;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect PcareUser_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager PcareUser.entityManager;
    
    public static final List<String> PcareUser.fieldNames4OrderClauseFilter = java.util.Arrays.asList("userID", "firstName", "lastName", "emailId", "dateOfBirth", "phoneNumber", "buddy", "deviceSerialNumber", "createdOn", "registeredOn", "termsAcceptedOn", "active");
    
    public static final EntityManager PcareUser.entityManager() {
        EntityManager em = new PcareUser().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long PcareUser.countPcareUsers() {
        return entityManager().createQuery("SELECT COUNT(o) FROM PcareUser o", Long.class).getSingleResult();
    }
    
    public static List<PcareUser> PcareUser.findAllPcareUsers() {
        return entityManager().createQuery("SELECT o FROM PcareUser o", PcareUser.class).getResultList();
    }
    
    public static List<PcareUser> PcareUser.findAllPcareUsers(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM PcareUser o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, PcareUser.class).getResultList();
    }
    
    public static PcareUser PcareUser.findPcareUser(Long id) {
        if (id == null) return null;
        return entityManager().find(PcareUser.class, id);
    }
    
    public static List<PcareUser> PcareUser.findPcareUserEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM PcareUser o", PcareUser.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<PcareUser> PcareUser.findPcareUserEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM PcareUser o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, PcareUser.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void PcareUser.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void PcareUser.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            PcareUser attached = PcareUser.findPcareUser(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void PcareUser.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void PcareUser.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public PcareUser PcareUser.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        PcareUser merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
